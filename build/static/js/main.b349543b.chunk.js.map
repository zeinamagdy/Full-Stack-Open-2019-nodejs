{"version":3,"sources":["Components/Filter.js","Components/Persons.js","Components/PersonForm .js","services/persons.js","Components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","type","onChange","onSearch","Persons","persons","deletePerson","map","person","key","id","name","number","onClick","window","confirm","PersonForm","onChangeName","value","newName","onChangeNumber","newNumber","OnNameAdded","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","messageStyle","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","message","style","App","useState","setPersons","result","setResult","setNewName","setNewNumber","setMessage","messageType","setMessageType","useEffect","personService","initialPersons","updateNumber","personObject","oldObject","find","item","oldPerson","filter","concat","event","searchKeyword","target","toLowerCase","length","includes","preventDefault","undefined","setTimeout","catch","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b349543b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    \r\n    return (\r\n        <div>\r\n            filter shown with <input type='text' onChange={props.onSearch} />\r\n        </div>\r\n    )\r\n}\r\nexport default Filter","import React from 'react';\r\n\r\nconst Persons = ({ persons, deletePerson }) => {\r\n    return persons.map((person) =>\r\n        <li key={person.id}>\r\n            {person.name} {person.number}\r\n            <button\r\n                onClick={() =>\r\n                    window.confirm(`Delete ${person.name}?`) &&\r\n                    deletePerson(person)\r\n                }\r\n            >\r\n                Delete\r\n            </button>\r\n        </li>)\r\n}\r\nexport default Persons","import React from 'react';\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <form>\r\n            <div>\r\n                name: <input type='text' onChange={props.onChangeName} value={props.newName} />\r\n            </div>\r\n            <div>\r\n                number: <input type='text' onChange={props.onChangeNumber} value={props.newNumber} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\" onClick={props.OnNameAdded}>add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default PersonForm ","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\nconst deletePerson = person => {\r\n    const request = axios.delete(baseUrl + `/${person.id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    deletePerson: deletePerson\r\n}","import React from 'react';\r\n\r\nconst Notification = (props) => {\r\n    const messageStyle = {\r\n        color: props.type === 'error' ? 'red' : 'green',\r\n        background: 'lightgrey',\r\n        fontSize: 20,\r\n        borderStyle: 'solid',\r\n        borderRadius: 5,\r\n        padding: 10,\r\n        marginBottom: 10\r\n    }\r\n\r\n    if (props.message === '')\r\n        return null\r\n    return (\r\n        <div style={messageStyle}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport Filter from './Components/Filter';\nimport Persons from './Components/Persons';\nimport PersonForm from './Components/PersonForm ';\nimport personService from './services/persons';\nimport Notification from './Components/Notification';\n\n\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [result, setResult] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [message, setMessage] = useState('')\n  const [messageType, setMessageType] = useState('')\n\n  const hook = () => {\n    personService.getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n        setResult(initialPersons)\n      })\n  }\n  useEffect(hook, [])\n\n  const handelNewName = (event) => {\n    setNewName(event.target.value)\n  }\n  const handelNewNumber = (event) => {\n    setNewNumber(event.target.value);\n  }\n  const handelSearch = (event) => {\n    let searchKeyword = event.target.value.toLowerCase();\n    if (searchKeyword.length > 0) {\n      setResult(result.filter((person) => person.name.toLowerCase().includes(searchKeyword)));\n    } else {\n      setResult(persons);\n    }\n  }\n\n  const deletePerson = (person) => {\n    personService.deletePerson(person)\n      .then(response => {\n        setPersons(result.filter((item) => item.id !== person.id))\n        setResult(result.filter((item) => item.id !== person.id))\n      })\n      .catch(error => {\n        setMessage(`Information of ${person.name} has already removed`);\n        setMessageType('error')\n        setTimeout(() => {\n          setMessage('')\n          setMessageType('')\n        }, 5000)\n\n      })\n  }\n\n  const addName = (event) => {\n    event.preventDefault();\n    if (newName.length === 0 || newNumber.length === 0) {\n      return;\n    }\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    if (result.find((person) => person.name === newName) === undefined) {\n      personService.create(personObject)\n        .then(person => {\n          setPersons(persons.concat(person));\n          setResult(result.concat(person));\n          setNewName('');\n          setNewNumber('');\n          setMessage(`Addes ${person.name}`);\n          setTimeout(() => {\n            setMessage('')\n          }, 5000)\n\n        })\n    } else {\n      window.confirm(`${newName} is already added to the phonebook, replace old number with new? `) &&\n        updateNumber(personObject)\n\n    }\n  }\n\n  const updateNumber = personObject => {\n    const oldObject = result.find((item) => item.name === personObject.name);\n    const oldPerson = result.filter((item) => item.name !== personObject.name)\n    personService.update(oldObject.id, personObject)\n      .then(person => {\n        setPersons(oldPerson.concat(person));\n        setResult(oldPerson.concat(person));\n        setNewName('');\n        setNewNumber('');\n      });\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} type={messageType} />\n      <Filter onSearch={handelSearch} />\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        onChangeName={handelNewName}\n        onChangeNumber={handelNewNumber}\n        OnNameAdded={addName} />\n      <h2>Numbers</h2>\n      <ul>\n        <Persons persons={result} deletePerson={deletePerson} />\n      </ul>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}